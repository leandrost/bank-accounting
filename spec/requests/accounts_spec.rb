# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/accounts', type: :request do
  subject(:body) { JSON.parse(response.body) }

  let(:account) { Account.create!(name: 'Some Account Name') }

  let(:valid_params) do
    {
      data: {
        type: 'account',
        attributes: {
          name: 'Account Name'
        }
      }
    }
  end

  let(:invalid_params) do
    {
      data: {
        type: 'account',
        attributes: {
          name: ''
        }
      }
    }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # AccountsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {}
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      expected_name = account.name

      get accounts_url, headers: valid_headers, as: :json

      expect(response).to be_successful
      expect(body).to eq(
        'data' => [
          {
            'id' => account.id.to_s,
            'type' => 'accounts',
            'attributes' => {
              'name' => expected_name,
              'balance' => '0.0'
            }
          }
        ]
      )
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      expected_name = account.name

      get account_url(account), as: :json

      expect(response).to be_successful
      expect(body).to eq(
        'data' => {
          'id' => account.id.to_s,
          'type' => 'accounts',
          'attributes' => {
            'name' => expected_name,
            'balance' => '0.0'
          }
        }
      )
    end
  end

  describe 'POST /create' do
    subject(:post_create) do
      post(
        accounts_url,
        params: valid_params,
        headers: valid_headers,
        as: :json
      )
    end

    context 'with valid parameters' do
      it 'creates a new Account' do
        expect { post_create }.to change(Account, :count).by(1)
      end

      it 'renders a JSON response with the new account' do
        post_create

        expect(response).to have_http_status(:created)

        account = Account.last
        expect(body).to eq(
          'data' => {
            'id' => account.id.to_s,
            'type' => 'accounts',
            'attributes' => {
              'name' => account.name,
              'balance' => '0.0'
            }
          }
        )
      end
    end

    context 'with balance' do
      before :each do
        valid_params[:data][:attributes][:balance] = 100
      end

      it 'creates a new Account with balance' do
        expect { post_create }.to change(Account, :count).by(1)
        expect(Account.last.balance).to eq(100)
      end
    end

    context 'with invalid parameters' do
      subject(:post_create) do
        post(
          accounts_url,
          params: invalid_params,
          headers: valid_headers,
          as: :json
        )
      end

      it 'does not create a new Account' do
        expect { post_create }.to change(Account, :count).by(0)
      end

      it 'renders a JSON response with errors' do
        post_create

        expect(response).to have_http_status(:unprocessable_entity)
        expect(body).to eq(
          'errors' => [
            {
              'source' => {
                'pointer' => '/data/attributes/name'
              },
              'detail' => "can't be blank"
            }
          ]
        )
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      subject(:path_update) do
        patch account_url(account), {
          params: valid_params,
          headers: valid_headers,
          as: :json
        }
      end

      let(:valid_params) do
        {
          data: {
            type: 'accounts',
            attributes: {
              name: new_name
            }
          }
        }
      end

      let(:new_name) { 'Other Account name' }

      it 'updates the requested account' do
        path_update

        account.reload

        expect(account).to have_attributes(name: new_name)
      end

      it 'renders a JSON response with the account' do
        path_update

        expect(response).to have_http_status(:ok)
        expect(body).to eq(
          'data' => {
            'id' => account.id.to_s,
            'type' => 'accounts',
            'attributes' => {
              'name' => new_name,
              'balance' => '0.0'
            }
          }
        )
      end
    end

    context 'with invalid parameters' do
      subject(:path_update) do
        patch account_url(account), {
          params: invalid_params,
          headers: valid_headers,
          as: :json
        }
      end

      it 'does not update account' do
        expect { path_update }.not_to change(account, :name)
      end

      it 'renders a JSON response with errors' do
        path_update

        expect(response).to have_http_status(:unprocessable_entity)
        expect(body).to eq(
          'errors' => [
            {
              'source' => {
                'pointer' => '/data/attributes/name'
              },
              'detail' => "can't be blank"
            }
          ]
        )
      end
    end
  end

  describe 'DELETE /destroy' do
    subject(:delete_destroy) do
      delete account_url(account), headers: valid_headers, as: :json
    end

    let!(:account) { Account.create!(name: 'foo') }

    it 'renders no content' do
      delete_destroy
      expect(response).to have_http_status(:no_content)
    end

    it 'destroys the requested account' do
      expect { delete_destroy }.to change(Account, :count).by(-1)
    end
  end
end
